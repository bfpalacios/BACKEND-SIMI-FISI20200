USE `dbsimi`;

-- ------------------------------------------------------------
-- store procedure 'listar cursos por nivel e idioma'
-- ------------------------------------------------------------
DROP procedure IF EXISTS `SP_CURSO_LIST`;
DELIMITER $$
CREATE PROCEDURE `SP_CURSO_LIST`(IN P_ID_IDIOMA INT, IN P_ID_NIVEL INT)
BEGIN
SELECT ID_CURSO, CICLO
FROM TMCURSO
WHERE FK_ID_IDIOMA = P_ID_IDIOMA AND FK_ID_NIVEL = P_ID_NIVEL;
END$$
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure 'eliminar docente/usuario/persona'
-- ------------------------------------------------------------
DROP procedure IF EXISTS `SP_DOC_USU_PER_DELETE`;
DELIMITER $$
CREATE PROCEDURE `SP_DOC_USU_PER_DELETE`(
	codDoc VARCHAR(10)
)
BEGIN
    DECLARE codPer VARCHAR(11);
    DECLARE codUsu VARCHAR(11);
    SET codUsu = (SELECT FK_ID_USUARIO FROM tmdocente WHERE COD_DOCENTE_CI = codDoc);
    SET codPer = (SELECT FK_ID_PERSONA FROM tmusuario WHERE ID_USUARIO = codUsu);
    DELETE FROM tmdocente WHERE COD_DOCENTE_CI = codDoc;
    DELETE FROM tmusuario WHERE ID_USUARIO = codUsu;
    DELETE FROM tmpersona WHERE ID_PERSONA = codPer;
END$$
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure 'insertar docente/usuario/persona'
-- ------------------------------------------------------------
DROP procedure IF EXISTS `SP_DOC_USU_PER_INSERT`;
DELIMITER $$
CREATE PROCEDURE `SP_DOC_USU_PER_INSERT`(
	nombre VARCHAR(50),
    apellidoPat VARCHAR(50),
    apellidoMat VARCHAR(50),
    dni INT(11),
    genero INT(1),
    edad INT(11),
    university VARCHAR(128),
    lugarNacDist VARCHAR(128),
    lugarNacProv VARCHAR(128),
    lugarNacDep VARCHAR(128),
    nacionalidad VARCHAR(128),
    address VARCHAR(128),
    phone VARCHAR(128),
    email VARCHAR(150),
    passwd VARCHAR(50),
    estado INT(11),
    departamento VARCHAR(50)
)
BEGIN
    DECLARE codPer INT;
    DECLARE codUsu INT;
    DECLARE codDoc VARCHAR(10);
    INSERT INTO tmpersona (NOMBRE, APELLIDO_PAT, APELLIDO_MAT, DNI, GENERO, EDAD, university,
		LUGAR_NAC_DIST, LUGAR_NAC_PROV, LUGAR_NAC_DEP, NACIONALIDAD, ADDRESS, PHONE)
		VALUE (nombre, apellidoPat, apellidoMat, dni, genero, edad, university,
        lugarNacDist, lugarNacProv, lugarNacDep, nacionalidad, address, phone);
	SET codPer := (SELECT MAX(ID_PERSONA) FROM tmpersona);
    INSERT INTO tmusuario (FK_ID_PERSONA, EMAIL, PASSWORD, FK_ID_ROL, ESTADO)
		VALUE (codPer, email, passwd, 2, estado);
	SET codUsu := (SELECT MAX(ID_USUARIO) FROM tmusuario);
    SET codDoc := (SELECT CONCAT("DOC", LPAD((SUBSTRING(MAX(COD_DOCENTE_CI), 4, 5) + 1), 5, 0)) FROM tmdocente);
    INSERT INTO tmdocente (COD_DOCENTE_CI, FK_ID_USUARIO, DEPARTAMENTO)
		VALUE (codDoc, codUsu, departamento);
END$$
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure 'eliminar estudiante/usuario/persona'
-- ------------------------------------------------------------
DROP procedure IF EXISTS `SP_EST_USU_PER_DELETE`;
DELIMITER $$
CREATE DEFINER=`dev01`@`%` PROCEDURE `SP_EST_USU_PER_DELETE`(
	codEst VARCHAR(10)
)
BEGIN
    DECLARE codPer VARCHAR(11);
    DECLARE codUsu VARCHAR(11);
    SET codUsu = (SELECT FK_ID_USUARIO FROM tmestudiante WHERE COD_ESTUDIANTE_CI = codEst);
    SET codPer = (SELECT FK_ID_PERSONA FROM tmusuario WHERE ID_USUARIO = codUsu);
    DELETE FROM tmestudiante WHERE COD_ESTUDIANTE_CI = codEst;
    DELETE FROM tmusuario WHERE ID_USUARIO = codUsu;
    DELETE FROM tmpersona WHERE ID_PERSONA = codPer;
END$$
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure 'insertar estudiante/usuario/persona'
-- ------------------------------------------------------------
DROP procedure IF EXISTS `SP_EST_USU_PER_INSERT`;
DELIMITER $$
CREATE DEFINER=`dev01`@`%` PROCEDURE `SP_EST_USU_PER_INSERT`(
	nombre VARCHAR(50),
    apellidoPat VARCHAR(50),
    apellidoMat VARCHAR(50),
    dni INT(11),
    genero INT(1),
    edad INT(11),
    university VARCHAR(128),
    lugarNacDist VARCHAR(128),
    lugarNacProv VARCHAR(128),
    lugarNacDep VARCHAR(128),
    nacionalidad VARCHAR(128),
    address VARCHAR(128),
    phone VARCHAR(128),
    email VARCHAR(150),
    passwd VARCHAR(50),
    estado INT(11),
    idTipoEstudiante INT(11)
)
BEGIN
    DECLARE codPer INT;
    DECLARE codUsu INT;
    DECLARE codEst VARCHAR(10);
    INSERT INTO tmpersona (NOMBRE, APELLIDO_PAT, APELLIDO_MAT, DNI, GENERO, EDAD, university,
		LUGAR_NAC_DIST, LUGAR_NAC_PROV, LUGAR_NAC_DEP, NACIONALIDAD, ADDRESS, PHONE)
		VALUE (nombre, apellidoPat, apellidoMat, dni, genero, edad, university,
        lugarNacDist, lugarNacProv, lugarNacDep, nacionalidad, address, phone);
	SET codPer := (SELECT MAX(ID_PERSONA) FROM tmpersona);
    INSERT INTO tmusuario (FK_ID_PERSONA, EMAIL, PASSWORD, FK_ID_ROL, ESTADO)
		VALUE (codPer, email, passwd, 1, estado);
	SET codUsu := (SELECT MAX(ID_USUARIO) FROM tmusuario);
    SET codEst := (SELECT CONCAT("EST", LPAD((SUBSTRING(MAX(COD_ESTUDIANTE_CI), 4, 5) + 1), 5, 0)) FROM tmestudiante);
    INSERT INTO tmestudiante (COD_ESTUDIANTE_CI, FK_ID_USUARIO, FK_ID_TIPO_ESTUDIANTE)
		VALUE (codEst, codUsu, idTipoEstudiante);
END$$
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure 'listar matriculas'
-- ------------------------------------------------------------
DROP PROCEDURE IF EXISTS SP_MATRICULA_LIST;
DELIMITER //
CREATE PROCEDURE SP_MATRICULA_LIST() 
BEGIN
SELECT MAT.ID_MATRICULA, MAT.FK_COD_ESTUDIANTE_CI, MAT.FK_ID_PROGCURSO, MAT.FK_SEC_VOUCHER, MAT.FK_ID_ESTADO_MATRICULA, MAT.FECHA_MATRICULA,
ETM.NOM_ESTADO_MATRICULA, IDIOMA.NOM_IDIOMA, NIVEL.NOM_NIVEL, CURSO.CICLO, PER.NOMBRE, PER.APELLIDO_PAT, PER.APELLIDO_MAT, 
GHO.NOM_GRUPOHORARIO, HCLA.HORA_INICIO, HCLA.HORA_SALIDA
FROM TPMATRICULA MAT
LEFT JOIN TXESTADO_MATRICULA ETM ON MAT.FK_ID_ESTADO_MATRICULA = ETM.ID_ESTADO_MATRICULA 
LEFT JOIN TPPROG_CURSO PROG ON MAT.FK_ID_PROGCURSO = PROG.ID_PROGCURSO
LEFT JOIN TPPROG_DOC_CURSO PROGDC ON PROG.FK_ID_PROG_DOC_CUR = PROGDC.ID_PROG_DOC_CUR
LEFT JOIN TMCURSO CURSO ON  PROGDC.FK_ID_CURSO = CURSO.ID_CURSO
LEFT JOIN TMIDIOMA IDIOMA ON CURSO.FK_ID_IDIOMA = IDIOMA.ID_IDIOMA
LEFT JOIN TXNIVEL NIVEL ON CURSO.FK_ID_NIVEL = NIVEL.ID_NIVEL
LEFT JOIN TMDOCENTE DOC ON PROGDC.FK_ID_DOCENTE = DOC.COD_DOCENTE_CI
LEFT JOIN TMUSUARIO USUARIO ON DOC.FK_ID_USUARIO = USUARIO.ID_USUARIO
LEFT JOIN TMPERSONA PER ON USUARIO.FK_ID_PERSONA = PER.ID_PERSONA
LEFT JOIN TMHORARIO_GRUPO_HORARIO HGH ON PROG.FK_ID_HORARIO_GRUPOHORARIO = HGH.ID_HORARIO_GRUPOHORARIO
LEFT JOIN TMGRUPO_HORARIO GHO ON HGH.FK_ID_GRUPOHORARIO = GHO.ID_GRUPOHORARIO
LEFT JOIN TXHORAS_CLASE HCLA ON HGH.FK_ID_HORA = HCLA.ID_HORA
GROUP BY MAT.ID_MATRICULA;
END//
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure 'listar nivel
-- ------------------------------------------------------------
DROP PROCEDURE IF EXISTS SP_NIVEL_LIST;
DELIMITER //
CREATE PROCEDURE SP_NIVEL_LIST(IN P_ID_IDIOMA INT) 
BEGIN
SELECT CURSO.FK_ID_NIVEL, NIVEL.NOM_NIVEL
FROM TMCURSO CURSO
LEFT JOIN TXNIVEL NIVEL ON CURSO.FK_ID_NIVEL = NIVEL.ID_NIVEL
WHERE CURSO.FK_ID_IDIOMA = P_ID_IDIOMA
GROUP BY NIVEL.NOM_NIVEL
ORDER BY CURSO.FK_ID_NIVEL;
END//
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure 'listar plan de estudios'
-- ------------------------------------------------------------
DROP PROCEDURE IF EXISTS SP_PLAN_LIST;
DELIMITER //
CREATE PROCEDURE SP_PLAN_LIST() 
BEGIN
  SELECT CURSO.ID_CURSO, CURSO.FK_ID_IDIOMA, CURSO.FK_ID_NIVEL, CURSO.CICLO, IDIOMA.NOM_IDIOMA, NIVEL.NOM_NIVEL, COUNT(CURSO.CICLO) AS COUNTCICLO, CURSO.LIBRO
  FROM TMCURSO CURSO
  INNER JOIN TMIDIOMA IDIOMA ON CURSO.FK_ID_IDIOMA = IDIOMA.ID_IDIOMA
  INNER JOIN TXNIVEL NIVEL ON CURSO.FK_ID_NIVEL = NIVEL.ID_NIVEL
  GROUP BY IDIOMA.NOM_IDIOMA, NIVEL.NOM_NIVEL
  ORDER BY IDIOMA.ID_IDIOMA, NIVEL.ID_NIVEL;
END//
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure 'listar programaciÃ³n de cursos'
-- ------------------------------------------------------------
DROP PROCEDURE IF EXISTS SP_PROGRAMACION_LIST;
DELIMITER //
CREATE PROCEDURE SP_PROGRAMACION_LIST() 
BEGIN
  SELECT PROG.ID_PROGCURSO, PROG.FK_ID_PROG_DOC_CUR, PROG.FK_ID_AULA, PROG.FK_ID_HORARIO_GRUPOHORARIO, 
  PROG.FK_ID_ESTADO_PROGCURSO, IDIOMA.NOM_IDIOMA, NIVEL.NOM_NIVEL, CURSO.CICLO, 
  CONCAT(PER.NOMBRE,  " ", PER.APELLIDO_PAT, " ", PER.APELLIDO_MAT) AS DOCENTE, 
  GHO.NOM_GRUPOHORARIO, CONCAT(HCLA.HORA_INICIO," a ", HCLA.HORA_SALIDA) AS HORA, COUNT( DISTINCT  MAT.ID_MATRICULA) AS MATRICULADOS
  FROM TPPROG_CURSO PROG
  INNER JOIN TPPROG_DOC_CURSO PROGDC ON PROG.FK_ID_PROG_DOC_CUR = PROGDC.ID_PROG_DOC_CUR
  INNER JOIN TMCURSO CURSO ON CURSO.ID_CURSO = PROGDC.FK_ID_CURSO
  INNER JOIN TMIDIOMA IDIOMA ON IDIOMA.ID_IDIOMA = CURSO.FK_ID_IDIOMA
  INNER JOIN TXNIVEL NIVEL ON NIVEL.ID_NIVEL = CURSO.FK_ID_NIVEL
  INNER JOIN TMDOCENTE DOC ON DOC.COD_DOCENTE_CI = PROGDC.FK_ID_DOCENTE
  INNER JOIN TMUSUARIO USUARIO ON USUARIO.ID_USUARIO = DOC.FK_ID_USUARIO
  INNER JOIN TMPERSONA PER ON PER.ID_PERSONA = USUARIO.FK_ID_PERSONA
  INNER JOIN TMHORARIO_GRUPO_HORARIO HGO ON HGO.ID_HORARIO_GRUPOHORARIO = PROG.FK_ID_HORARIO_GRUPOHORARIO
  INNER JOIN TMGRUPO_HORARIO GHO ON GHO.ID_GRUPOHORARIO = HGO.FK_ID_GRUPOHORARIO
  INNER JOIN TXHORAS_CLASE HCLA ON HCLA.ID_HORA = HGO.FK_ID_HORA
  LEFT JOIN TPMATRICULA MAT ON PROG.ID_PROGCURSO = MAT.FK_ID_PROGCURSO
  LEFT JOIN TMPERIODO_ACADEMICO PERI ON PROGDC.FK_ID_PERIODO = PERI.ID_PERIODO
  WHERE PROG.FK_ID_ESTADO_PROGCURSO > 1 AND PROGDC.FK_ID_PERIODO = (SELECT ID_PERIODO FROM TMPERIODO_ACADEMICO WHERE FECHA_INICIO<=NOW() AND FECHA_FIN>=NOW())
  GROUP BY PROG.ID_PROGCURSO;
END//
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure 'insertar solicitudes de apertura'
-- ------------------------------------------------------------
DROP procedure IF EXISTS `SP_SOLICITUD_INSERT`;
DELIMITER $$
CREATE PROCEDURE `SP_SOLICITUD_INSERT`(P_ID_USUARIO INT, P_ID_CURSO INT, P_ID_GRUPO INT)
BEGIN
DECLARE COD_ESTUDIANTE VARCHAR(10);
SET COD_ESTUDIANTE := (SELECT COD_ESTUDIANTE_CI FROM TMESTUDIANTE WHERE FK_ID_USUARIO = P_ID_USUARIO);

INSERT INTO TPSOLICITUD_APERTURA (FK_COD_ESTUDIANTE_CI, FK_ID_CURSO, FK_ID_HORARIO_GRUPOHORARIO) VALUES (COD_ESTUDIANTE, P_ID_CURSO, P_ID_GRUPO);
END$$
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure 'listar SOLICITUDES'
-- ------------------------------------------------------------
DROP procedure IF EXISTS `SP_SOLICITUD_LIST`;
DELIMITER $$
CREATE PROCEDURE SP_SOLICITUD_LIST()
BEGIN
SELECT SOL.ID_SOLICITUD, SOL.FK_COD_ESTUDIANTE_CI, SOL.FK_ID_CURSO, SOL.FK_ID_HORARIO_GRUPOHORARIO, 
CURSO.FK_ID_IDIOMA, CURSO.FK_ID_NIVEL, IDIOMA.NOM_IDIOMA, NIVEL.NOM_NIVEL, CURSO.CICLO, GHO.NOM_GRUPOHORARIO,
CONCAT(HCLA.HORA_INICIO," a ", HCLA.HORA_SALIDA) AS HORA, COUNT(distinct SOL.ID_SOLICITUD) AS SOLICITANTES
FROM TPSOLICITUD_APERTURA SOL
LEFT JOIN TMCURSO CURSO ON SOL.FK_ID_CURSO = CURSO.ID_CURSO
LEFT JOIN TMIDIOMA IDIOMA ON CURSO.FK_ID_IDIOMA = IDIOMA.ID_IDIOMA
LEFT JOIN TXNIVEL NIVEL ON CURSO.FK_ID_NIVEL = NIVEL.ID_NIVEL
LEFT JOIN TMHORARIO_GRUPO_HORARIO HGH ON SOL.FK_ID_HORARIO_GRUPOHORARIO = HGH.ID_HORARIO_GRUPOHORARIO
LEFT JOIN TMGRUPO_HORARIO GHO ON HGH.FK_ID_GRUPOHORARIO = GHO.ID_GRUPOHORARIO
INNER JOIN TXHORAS_CLASE HCLA ON HGH.FK_ID_HORA = HCLA.ID_HORA
GROUP BY SOL.FK_ID_CURSO;
END$$
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure 'listar voucher'
-- ------------------------------------------------------------
DROP procedure IF EXISTS `SP_VOUCHER_LIST`;
DELIMITER $$
CREATE PROCEDURE SP_VOUCHER_LIS()
BEGIN
	SELECT 
    COD AS CODIGO,
    SEC AS SECUENCIA,
    DESCRIPCION,
    NRODOCUMENTO,
    IMPORTE,
    FECHA,
    HORA,
    COMILLA AS ESTADO
    FROM TMVOUCHER;
END$$
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure 'listar VOUCHERS'
-- ------------------------------------------------------------
DROP procedure IF EXISTS `SP_VOUCHER_USUARIO_LIST`;
DELIMITER $$
CREATE PROCEDURE SP_VOUCHER_USUARIO_LIST()
BEGIN
	SELECT VOU.COD, VOU.SEC, VOU.NRODOCUMENTO, CONCAT(PER.NOMBRE, ' ', PER.APELLIDO_PAT, ' ', PER.APELLIDO_MAT) AS ALUMNO,
US.ID_USUARIO, EST.COD_ESTUDIANTE_CI
FROM TMVOUCHER VOU
LEFT JOIN TMPERSONA PER ON VOU.NRODOCUMENTO = PER.DNI
LEFT JOIN TMUSUARIO US ON PER.ID_PERSONA = US.FK_ID_PERSONA
LEFT JOIN TMESTUDIANTE EST ON US.ID_USUARIO = EST.FK_ID_USUARIO;
END$$
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure autorizaciÃ³n
-- ------------------------------------------------------------
DROP procedure IF EXISTS `USP_AUTORIZACION`;
DELIMITER $$
CREATE PROCEDURE `USP_AUTORIZACION` (
P_EMAIL VARCHAR(256), P_ID_USUARIO INT, P_ID_ROL INT)
BEGIN
	SELECT 
		TMU.EMAIL,
        TMU.ID_USUARIO,
        TMU.FK_ID_PERSONA,
        TMU.FK_ID_ROL
	FROM
		TMUSUARIO TMU
	WHERE 
    TMU.EMAIL = P_EMAIL 
    AND 
    TMU.ID_USUARIO = P_ID_USUARIO
    AND
    TMU.FK_ID_ROL = P_ID_ROL;
END$$
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure datos de usuario
-- ------------------------------------------------------------
DROP procedure IF EXISTS `USP_DATOS_USUARIO`;
DELIMITER $$
CREATE PROCEDURE `USP_DATOS_USUARIO`(P_ID_USUARIO INT)
BEGIN
SELECT 
	ID_USUARIO, 
	EMAIL, 
    NOMBRE, 
    APELLIDO_PAT, APELLIDO_MAT, 
	DNI,
    UNIVERSITY, 
    PHONE FROM TMPERSONA P
INNER JOIN TMUSUARIO U
ON P.ID_PERSONA = U.FK_ID_PERSONA
WHERE 
 U.ID_USUARIO = P_ID_USUARIO;
END$$
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure informaciÃ³n personal
-- ------------------------------------------------------------
DROP procedure IF EXISTS `USP_INFORMACION_PERSONAL`;
DELIMITER $$
CREATE PROCEDURE `USP_INFORMACION_PERSONAL`(P_ID_USUARIO INT, P_ID_PERSONA INT)
BEGIN
SELECT 
	ID_USUARIO, 
	EMAIL, 
    NOMBRE, 
    APELLIDO_PAT, APELLIDO_MAT, 
	DNI, 
    FECHA_NACIMIENTO, 
    LUGAR_NAC_DIST, LUGAR_NAC_PROV, LUGAR_NAC_DEP, NACIONALIDAD,
	EDAD, GENERO, 
    UNIVERSITY, 
    PHONE, ADDRESS FROM TMPERSONA P
INNER JOIN TMUSUARIO U
ON P.ID_PERSONA = U.FK_ID_PERSONA
WHERE 
U.FK_ID_PERSONA = P_ID_PERSONA AND U.ID_USUARIO = P_ID_USUARIO;
END$$
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure 'listar matriculas segÃºn usuario'
-- ------------------------------------------------------------
DROP PROCEDURE IF EXISTS USP_MATRICULA_LIST;
DELIMITER //
CREATE PROCEDURE USP_MATRICULA_LIST(IN COD_ESTUDIANTE VARCHAR(10)) 
BEGIN
SELECT MAT.ID_MATRICULA, MAT.FK_COD_ESTUDIANTE_CI, MAT.FK_ID_PROGCURSO, MAT.FK_SEC_VOUCHER, MAT.FK_ID_ESTADO_MATRICULA, MAT.FECHA_MATRICULA,
ETM.NOM_ESTADO_MATRICULA, IDIOMA.NOM_IDIOMA, NIVEL.NOM_NIVEL, CURSO.CICLO, PER.NOMBRE, PER.APELLIDO_PAT, PER.APELLIDO_MAT, 
GHO.NOM_GRUPOHORARIO, HCLA.HORA_INICIO, HCLA.HORA_SALIDA
FROM TPMATRICULA MAT
LEFT JOIN TXESTADO_MATRICULA ETM ON MAT.FK_ID_ESTADO_MATRICULA = ETM.ID_ESTADO_MATRICULA 
LEFT JOIN TPPROG_CURSO PROG ON MAT.FK_ID_PROGCURSO = PROG.ID_PROGCURSO
LEFT JOIN TPPROG_DOC_CURSO PROGDC ON PROG.FK_ID_PROG_DOC_CUR = PROGDC.ID_PROG_DOC_CUR
LEFT JOIN TMCURSO CURSO ON  PROGDC.FK_ID_CURSO = CURSO.ID_CURSO
LEFT JOIN TMIDIOMA IDIOMA ON CURSO.FK_ID_IDIOMA = IDIOMA.ID_IDIOMA
LEFT JOIN TXNIVEL NIVEL ON CURSO.FK_ID_NIVEL = NIVEL.ID_NIVEL
LEFT JOIN TMDOCENTE DOC ON PROGDC.FK_ID_DOCENTE = DOC.COD_DOCENTE_CI
LEFT JOIN TMUSUARIO USUARIO ON DOC.FK_ID_USUARIO = USUARIO.ID_USUARIO
LEFT JOIN TMPERSONA PER ON USUARIO.FK_ID_PERSONA = PER.ID_PERSONA
LEFT JOIN TMHORARIO_GRUPO_HORARIO HGH ON PROG.FK_ID_HORARIO_GRUPOHORARIO = HGH.ID_HORARIO_GRUPOHORARIO
LEFT JOIN TMGRUPO_HORARIO GHO ON HGH.FK_ID_GRUPOHORARIO = GHO.ID_GRUPOHORARIO
LEFT JOIN TXHORAS_CLASE HCLA ON HGH.FK_ID_HORA = HCLA.ID_HORA
WHERE MAT.FK_COD_ESTUDIANTE_CI = COD_ESTUDIANTE
GROUP BY MAT.ID_MATRICULA;
END//
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure hitorial academico
-- ------------------------------------------------------------
DROP PROCEDURE IF EXISTS SP_HITORIAL_LIST;
DELIMITER //
CREATE PROCEDURE SP_HITORIAL_LIST() 
BEGIN
select nota.id_nota, nota.promedio, nota.fk_id_matricula, mat.fk_cod_estudiante_ci, curso.id_curso, idioma.id_idioma, idioma.nom_idioma, curso.ciclo
from tpnota nota
left join tpmatricula mat on nota.fk_id_matricula = mat.id_matricula
left join tpprog_curso prog on mat.fk_id_progcurso = prog.id_progcurso
left join tpprog_doc_curso pdc on prog.fk_id_prog_doc_cur = pdc.id_prog_doc_cur
left join tmcurso curso on pdc.fk_id_curso = curso.id_curso
left join tmidioma idioma on curso.fk_id_idioma = idioma.id_idioma
where nota.promedio >= 14
group by nota.fk_id_matricula;
END//
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure vouchers sin usar
-- ------------------------------------------------------------
DROP procedure IF EXISTS `USP_VOUCHERS_SIN_USAR_LIST`;
DELIMITER $$
CREATE PROCEDURE `USP_VOUCHERS_SIN_USAR_LIST` (P_ID_USUARIO INT)
BEGIN
SELECT V.COD, U.ID_USUARIO, U.EMAIL, P.DNI, V.SEC, V.DESCRIPCION, V.IMPORTE, V.FECHA, V.COMILLA AS ESTADO FROM TMUSUARIO U 
INNER JOIN TMPERSONA P ON
U.FK_ID_PERSONA = P.ID_PERSONA
INNER JOIN TMVOUCHER V ON
V.NRODOCUMENTO = P.DNI
WHERE V.COMILLA = 0 AND U.ID_USUARIO = P_ID_USUARIO;
END$$
DELIMITER ;

-- ------------------------------------------------------------
-- store procedure VISTA DE CURSOS PROGRAMADOS POR MATRÃCULA
-- ------------------------------------------------------------
DROP PROCEDURE IF EXISTS USP_VWMATRICULA_LIST;
DELIMITER //	
CREATE procedure USP_VWMATRICULA_LIST(P_COD_ALUMNO varchar(10))
	BEGIN
    SELECT PROG.ID_PROGCURSO, PROG.FK_ID_PROG_DOC_CUR, PROG.FK_ID_AULA, PROG.FK_ID_HORARIO_GRUPOHORARIO, PROG.FK_ID_ESTADO_PROGCURSO,
		IDIOMA.NOM_IDIOMA, NIVEL.NOM_NIVEL, CURSO.CICLO, CONCAT(PER.NOMBRE, ' ', PER.APELLIDO_PAT, ' ', PER.APELLIDO_MAT) AS DOCENTE,
		GHO.NOM_GRUPOHORARIO, CONCAT(HCLA.HORA_INICIO, ' a ', HCLA.HORA_SALIDA) AS HORA, COUNT(DISTINCT MAT.ID_MATRICULA) AS MATRICULADOS
FROM TPPROG_CURSO PROG
INNER JOIN TPPROG_DOC_CURSO PROGDC ON PROG.FK_ID_PROG_DOC_CUR = PROGDC.ID_PROG_DOC_CUR
INNER JOIN TMCURSO CURSO ON CURSO.ID_CURSO = PROGDC.FK_ID_CURSO
INNER JOIN TMIDIOMA IDIOMA ON IDIOMA.ID_IDIOMA = CURSO.FK_ID_IDIOMA
INNER JOIN TXNIVEL NIVEL ON NIVEL.ID_NIVEL = CURSO.FK_ID_NIVEL
INNER JOIN TMDOCENTE DOC ON DOC.COD_DOCENTE_CI = PROGDC.FK_ID_DOCENTE
INNER JOIN TMUSUARIO USUARIO ON USUARIO.ID_USUARIO = DOC.FK_ID_USUARIO
INNER JOIN TMPERSONA PER ON PER.ID_PERSONA = USUARIO.FK_ID_PERSONA
INNER JOIN TMHORARIO_GRUPO_HORARIO HGO ON HGO.ID_HORARIO_GRUPOHORARIO = PROG.FK_ID_HORARIO_GRUPOHORARIO
INNER JOIN TMGRUPO_HORARIO GHO ON GHO.ID_GRUPOHORARIO = HGO.FK_ID_GRUPOHORARIO
INNER JOIN TXHORAS_CLASE HCLA ON HCLA.ID_HORA = HGO.FK_ID_HORA
LEFT JOIN TPMATRICULA MAT ON PROG.ID_PROGCURSO = MAT.FK_ID_PROGCURSO
LEFT JOIN TMPERIODO_ACADEMICO PERI ON PROGDC.FK_ID_PERIODO = PERI.ID_PERIODO
LEFT JOIN (SELECT curso.FK_ID_IDIOMA, MAX(curso.FK_ID_NIVEL) AS NIVEL, MAX(curso.CICLO) AS CICLO
			FROM tpnota nota
			LEFT JOIN tpmatricula mat ON nota.FK_ID_MATRICULA = mat.ID_MATRICULA
            LEFT JOIN tpprog_curso pcu ON mat.FK_ID_PROGCURSO = pcu.ID_PROGCURSO
			LEFT JOIN tpprog_doc_curso pdc ON pcu.FK_ID_PROG_DOC_CUR = pdc.ID_PROG_DOC_CUR
			LEFT JOIN tmcurso curso ON pdc.FK_ID_CURSO = curso.ID_CURSO
			WHERE mat.FK_COD_ESTUDIANTE_CI = P_COD_ALUMNO AND nota.Promedio >= 14
            GROUP BY curso.FK_ID_NIVEL, curso.FK_ID_IDIOMA) X 
            ON X.FK_ID_IDIOMA = IDIOMA.ID_IDIOMA AND X.NIVEL = NIVEL.ID_NIVEL AND X.CICLO + 1 <> CURSO.CICLO
WHERE PROG.FK_ID_ESTADO_PROGCURSO > 1 AND PROGDC.FK_ID_PERIODO = (SELECT  ID_PERIODO
																	FROM TMPERIODO_ACADEMICO
																	WHERE FECHA_INICIO <= NOW() AND FECHA_FIN >= NOW())
 AND X.NIVEL IS NULL
AND IDIOMA.ID_IDIOMA IN (SELECT DISTINCT curso.FK_ID_IDIOMA
						FROM tpnota nota
						LEFT JOIN tpmatricula mat ON nota.FK_ID_MATRICULA = mat.ID_MATRICULA
						LEFT JOIN tpprog_curso pcu ON mat.FK_ID_PROGCURSO = pcu.ID_PROGCURSO
						LEFT JOIN tpprog_doc_curso pdc ON pcu.FK_ID_PROG_DOC_CUR = pdc.ID_PROG_DOC_CUR
						LEFT JOIN tmcurso curso ON pdc.FK_ID_CURSO = curso.ID_CURSO
						WHERE mat.FK_COD_ESTUDIANTE_CI = P_COD_ALUMNO AND nota.Promedio >= 14)
GROUP BY PROG.ID_PROGCURSO
UNION 
SELECT PROG.ID_PROGCURSO, PROG.FK_ID_PROG_DOC_CUR, PROG.FK_ID_AULA, PROG.FK_ID_HORARIO_GRUPOHORARIO, PROG.FK_ID_ESTADO_PROGCURSO,
	IDIOMA.NOM_IDIOMA, NIVEL.NOM_NIVEL, CURSO.CICLO, CONCAT(PER.NOMBRE, ' ', PER.APELLIDO_PAT, ' ', PER.APELLIDO_MAT) AS DOCENTE,
	GHO.NOM_GRUPOHORARIO, CONCAT(HCLA.HORA_INICIO, ' a ', HCLA.HORA_SALIDA) AS HORA, COUNT(DISTINCT MAT.ID_MATRICULA) AS MATRICULADOS
FROM TPPROG_CURSO PROG
INNER JOIN TPPROG_DOC_CURSO PROGDC ON PROG.FK_ID_PROG_DOC_CUR = PROGDC.ID_PROG_DOC_CUR
INNER JOIN TMCURSO CURSO ON CURSO.ID_CURSO = PROGDC.FK_ID_CURSO
INNER JOIN TMIDIOMA IDIOMA ON IDIOMA.ID_IDIOMA = CURSO.FK_ID_IDIOMA
INNER JOIN TXNIVEL NIVEL ON NIVEL.ID_NIVEL = CURSO.FK_ID_NIVEL
INNER JOIN TMDOCENTE DOC ON DOC.COD_DOCENTE_CI = PROGDC.FK_ID_DOCENTE
INNER JOIN TMUSUARIO USUARIO ON USUARIO.ID_USUARIO = DOC.FK_ID_USUARIO
INNER JOIN TMPERSONA PER ON PER.ID_PERSONA = USUARIO.FK_ID_PERSONA
INNER JOIN TMHORARIO_GRUPO_HORARIO HGO ON HGO.ID_HORARIO_GRUPOHORARIO = PROG.FK_ID_HORARIO_GRUPOHORARIO
INNER JOIN TMGRUPO_HORARIO GHO ON GHO.ID_GRUPOHORARIO = HGO.FK_ID_GRUPOHORARIO
INNER JOIN TXHORAS_CLASE HCLA ON HCLA.ID_HORA = HGO.FK_ID_HORA
LEFT JOIN TPMATRICULA MAT ON PROG.ID_PROGCURSO = MAT.FK_ID_PROGCURSO
LEFT JOIN TMPERIODO_ACADEMICO PERI ON PROGDC.FK_ID_PERIODO = PERI.ID_PERIODO
WHERE PROG.FK_ID_ESTADO_PROGCURSO > 1 AND PROGDC.FK_ID_PERIODO = (SELECT ID_PERIODO
																	FROM TMPERIODO_ACADEMICO
																	WHERE FECHA_INICIO <= NOW() AND FECHA_FIN >= NOW())
AND NIVEL.ID_NIVEL = 1
AND CURSO.CICLO = 1
AND IDIOMA.ID_IDIOMA NOT IN (SELECT DISTINCT curso.FK_ID_IDIOMA 
								FROM tpnota nota
                                LEFT JOIN tpmatricula mat ON nota.FK_ID_MATRICULA = mat.ID_MATRICULA
                                LEFT JOIN tpprog_curso pcu ON mat.FK_ID_PROGCURSO = pcu.ID_PROGCURSO
								LEFT JOIN tpprog_doc_curso pdc ON pcu.FK_ID_PROG_DOC_CUR = pdc.ID_PROG_DOC_CUR
								LEFT JOIN tmcurso curso ON pdc.FK_ID_CURSO = curso.ID_CURSO
								WHERE mat.FK_COD_ESTUDIANTE_CI = P_COD_ALUMNO AND nota.Promedio >= 14)
GROUP BY PROG.ID_PROGCURSO;
END;//
DELIMITER ;
